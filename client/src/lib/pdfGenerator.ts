import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import type { CKDAssessment, DietPlan } from '@shared/schema';

// Brand colors and styling
const BRAND_COLORS = {
  primary: '#3B82F6', // Blue
  secondary: '#10B981', // Green
  accent: '#F59E0B', // Amber
  text: '#1F2937', // Gray-800
  lightText: '#6B7280', // Gray-500
  background: '#F9FAFB', // Gray-50
};

export class PDFGenerator {
  private doc: jsPDF;
  private pageHeight: number;
  private pageWidth: number;
  private margin: number;
  private currentY: number;

  constructor() {
    this.doc = new jsPDF('p', 'mm', 'a4');
    this.pageHeight = this.doc.internal.pageSize.height;
    this.pageWidth = this.doc.internal.pageSize.width;
    this.margin = 20;
    this.currentY = this.margin;
  }

  private addHeader(title: string, subtitle?: string) {
    // Add brand header with logo area
    this.doc.setFillColor(59, 130, 246); // Primary blue
    this.doc.rect(0, 0, this.pageWidth, 25, 'F');
    
    // Brand name
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(20);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('NephroCare', this.margin, 15);
    
    // Tagline
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text('Chronic Kidney Disease Assessment & Care', this.margin, 20);
    
    // Date
    const date = new Date().toLocaleDateString('en-GB');
    this.doc.text(`Generated: ${date}`, this.pageWidth - this.margin - 30, 15);
    
    this.currentY = 35;
    
    // Title
    this.doc.setTextColor(31, 41, 55); // Gray-800
    this.doc.setFontSize(18);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(title, this.margin, this.currentY);
    this.currentY += 10;
    
    if (subtitle) {
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(107, 114, 128); // Gray-500
      this.doc.text(subtitle, this.margin, this.currentY);
      this.currentY += 15;
    } else {
      this.currentY += 10;
    }
  }

  private addSection(title: string) {
    this.currentY += 5;
    this.doc.setFillColor(249, 250, 251); // Gray-50
    this.doc.rect(this.margin - 5, this.currentY - 5, this.pageWidth - 2 * this.margin + 10, 12, 'F');
    
    this.doc.setTextColor(31, 41, 55);
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(title, this.margin, this.currentY + 3);
    this.currentY += 15;
  }

  private addKeyValuePair(key: string, value: string | number, color?: string) {
    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(31, 41, 55);
    this.doc.text(`${key}:`, this.margin, this.currentY);
    
    this.doc.setFont('helvetica', 'normal');
    if (color) {
      this.doc.setTextColor(color);
    } else {
      this.doc.setTextColor(107, 114, 128);
    }
    this.doc.text(String(value), this.margin + 50, this.currentY);
    this.currentY += 6;
  }

  private addRiskBox(riskScore: number, riskLevel: string) {
    const boxWidth = 60;
    const boxHeight = 25;
    const boxX = this.pageWidth - this.margin - boxWidth;
    
    // Determine colors based on risk level
    let bgColor, textColor;
    if (riskLevel.toLowerCase().includes('high')) {
      bgColor = [239, 68, 68]; // Red
      textColor = [255, 255, 255];
    } else if (riskLevel.toLowerCase().includes('moderate')) {
      bgColor = [245, 158, 11]; // Amber
      textColor = [255, 255, 255];
    } else {
      bgColor = [16, 185, 129]; // Green
      textColor = [255, 255, 255];
    }
    
    this.doc.setFillColor(bgColor[0], bgColor[1], bgColor[2]);
    this.doc.roundedRect(boxX, this.currentY - 5, boxWidth, boxHeight, 3, 3, 'F');
    
    this.doc.setTextColor(textColor[0], textColor[1], textColor[2]);
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Risk Score', boxX + boxWidth/2, this.currentY + 3, { align: 'center' });
    
    this.doc.setFontSize(16);
    this.doc.text(`${(riskScore * 100).toFixed(1)}%`, boxX + boxWidth/2, this.currentY + 10, { align: 'center' });
    
    this.doc.setFontSize(10);
    this.doc.text(riskLevel, boxX + boxWidth/2, this.currentY + 16, { align: 'center' });
  }

  private checkPageBreak(additionalSpace: number = 20) {
    if (this.currentY + additionalSpace > this.pageHeight - this.margin) {
      this.doc.addPage();
      this.currentY = this.margin;
    }
  }

  private addFooter() {
    const footerY = this.pageHeight - 15;
    this.doc.setFontSize(8);
    this.doc.setTextColor(107, 114, 128);
    this.doc.text('This report is generated by NephroCare for educational purposes. Please consult a healthcare professional for medical advice.', 
      this.pageWidth/2, footerY, { align: 'center' });
    
    // Page number
    const pageNum = this.doc.internal.getCurrentPageInfo().pageNumber;
    this.doc.text(`Page ${pageNum}`, this.pageWidth - this.margin, footerY, { align: 'right' });
  }

  generateAssessmentReport(assessment: CKDAssessment): void {
    const riskScore = assessment.riskScore || 0;
    const riskLevel = riskScore > 0.7 ? 'High Risk' : riskScore > 0.4 ? 'Moderate Risk' : 'Low Risk';
    
    this.addHeader('CKD Assessment Report', `Patient: ${assessment.patientName}`);
    
    // Risk score box
    this.addRiskBox(riskScore, riskLevel);
    this.currentY += 30;
    
    // Patient Information
    this.addSection('Patient Information');
    this.addKeyValuePair('Name', assessment.patientName);
    this.addKeyValuePair('Age', `${assessment.age} years`);
    this.addKeyValuePair('Assessment Date', new Date(assessment.createdAt!).toLocaleDateString());
    
    this.checkPageBreak();
    
    // Vital Signs
    this.addSection('Vital Signs & Physical Examination');
    this.addKeyValuePair('Blood Pressure', `${assessment.bloodPressure} mmHg`);
    this.addKeyValuePair('Appetite', assessment.appetite);
    this.addKeyValuePair('Pedal Edema', assessment.pedalEdema);
    this.addKeyValuePair('Anemia', assessment.anemia);
    
    this.checkPageBreak();
    
    // Laboratory Results
    this.addSection('Laboratory Results');
    
    // Urine Tests
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(59, 130, 246);
    this.doc.text('Urine Analysis:', this.margin, this.currentY);
    this.currentY += 8;
    
    this.addKeyValuePair('Albumin', assessment.albumin);
    this.addKeyValuePair('Sugar', assessment.sugar);
    this.addKeyValuePair('Red Blood Cells', assessment.redBloodCells);
    this.addKeyValuePair('Pus Cells', assessment.pusCell);
    this.addKeyValuePair('Bacteria', assessment.bacteria);
    
    this.currentY += 5;
    
    // Blood Tests
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(59, 130, 246);
    this.doc.text('Blood Chemistry:', this.margin, this.currentY);
    this.currentY += 8;
    
    this.addKeyValuePair('Blood Glucose (Random)', `${assessment.bloodGlucoseRandom} mg/dL`);
    this.addKeyValuePair('Blood Urea', `${assessment.bloodUrea} mg/dL`);
    this.addKeyValuePair('Serum Creatinine', `${assessment.serumCreatinine} mg/dL`);
    this.addKeyValuePair('Sodium', `${assessment.sodium} mEq/L`);
    this.addKeyValuePair('Potassium', `${assessment.potassium} mEq/L`);
    
    this.currentY += 5;
    
    // Complete Blood Count
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(59, 130, 246);
    this.doc.text('Complete Blood Count:', this.margin, this.currentY);
    this.currentY += 8;
    
    this.addKeyValuePair('Hemoglobin', `${assessment.hemoglobin} g/dL`);
    this.addKeyValuePair('WBC Count', `${assessment.wbcCount} cells/μL`);
    this.addKeyValuePair('RBC Count', `${assessment.rbcCount} million/μL`);
    
    this.checkPageBreak();
    
    // Medical History
    this.addSection('Medical History');
    this.addKeyValuePair('Hypertension', assessment.hypertension);
    this.addKeyValuePair('Diabetes Mellitus', assessment.diabetesMellitus);
    this.addKeyValuePair('Coronary Artery Disease', assessment.coronaryArteryDisease);
    
    this.checkPageBreak();
    
    // Risk Assessment
    this.addSection('Risk Assessment Summary');
    this.doc.setFontSize(11);
    this.doc.setTextColor(31, 41, 55);
    
    const riskText = riskScore > 0.7 
      ? 'High risk of CKD. Immediate medical consultation recommended.' 
      : riskScore > 0.4 
        ? 'Moderate risk of CKD. Regular monitoring and lifestyle changes advised.'
        : 'Low risk of CKD. Maintain healthy lifestyle and regular check-ups.';
    
    this.doc.text(riskText, this.margin, this.currentY, { maxWidth: this.pageWidth - 2 * this.margin });
    this.currentY += 15;
    
    // Recommendations
    this.addSection('General Recommendations');
    const recommendations = [
      '• Maintain regular follow-up with healthcare provider',
      '• Monitor blood pressure and blood sugar levels',
      '• Follow a kidney-friendly diet plan',
      '• Stay adequately hydrated',
      '• Exercise regularly as advised by your doctor',
      '• Avoid nephrotoxic medications without medical supervision'
    ];
    
    recommendations.forEach(rec => {
      this.doc.setFontSize(10);
      this.doc.setTextColor(31, 41, 55);
      this.doc.text(rec, this.margin, this.currentY);
      this.currentY += 5;
    });
    
    this.addFooter();
  }

  generateDietPlanReport(dietPlan: DietPlan, assessment?: CKDAssessment): void {
    this.addHeader('Personalized Diet Plan', assessment ? `Patient: ${assessment.patientName}` : undefined);
    
    // Diet Plan Overview
    this.addSection('Diet Plan Overview');
    this.addKeyValuePair('Diet Type', dietPlan.dietType);
    this.addKeyValuePair('Plan Created', new Date(dietPlan.createdAt!).toLocaleDateString());
    if (assessment) {
      this.addKeyValuePair('Based on Assessment', new Date(assessment.createdAt!).toLocaleDateString());
    }
    
    this.checkPageBreak();
    
    // Meal Plans
    ['breakfast', 'lunch', 'dinner', 'snacks'].forEach(mealType => {
      const mealKey = mealType as keyof typeof dietPlan;
      const meal = dietPlan[mealKey] as string;
      
      if (meal) {
        this.checkPageBreak(30);
        
        this.addSection(mealType.charAt(0).toUpperCase() + mealType.slice(1));
        
        // Parse meal items (assuming they're separated by commas or bullet points)
        const items = meal.split(/[,•\n]/).filter(item => item.trim());
        
        items.forEach(item => {
          this.doc.setFontSize(10);
          this.doc.setTextColor(31, 41, 55);
          this.doc.text(`• ${item.trim()}`, this.margin, this.currentY);
          this.currentY += 5;
        });
        
        this.currentY += 5;
      }
    });
    
    this.checkPageBreak();
    
    // Dietary Guidelines
    this.addSection('Dietary Guidelines for CKD');
    const guidelines = [
      '• Limit sodium intake to less than 2,300mg per day',
      '• Monitor protein intake as advised by your healthcare provider',
      '• Choose kidney-friendly fruits and vegetables',
      '• Limit phosphorus-rich foods if recommended',
      '• Stay hydrated but monitor fluid intake if restricted',
      '• Avoid processed and packaged foods high in sodium',
      '• Cook meals at home to control ingredients',
      '• Read food labels carefully for sodium and phosphorus content'
    ];
    
    guidelines.forEach(guideline => {
      this.doc.setFontSize(10);
      this.doc.setTextColor(31, 41, 55);
      this.doc.text(guideline, this.margin, this.currentY);
      this.currentY += 5;
    });
    
    this.checkPageBreak();
    
    // Important Notes
    this.addSection('Important Notes');
    this.doc.setFontSize(10);
    this.doc.setTextColor(239, 68, 68); // Red for important warnings
    this.doc.text('⚠ This diet plan is for educational purposes only.', this.margin, this.currentY);
    this.currentY += 6;
    this.doc.text('⚠ Always consult with a registered dietitian or healthcare provider before making significant dietary changes.', this.margin, this.currentY, { maxWidth: this.pageWidth - 2 * this.margin });
    this.currentY += 6;
    this.doc.text('⚠ Individual nutritional needs may vary based on medical condition and treatment plan.', this.margin, this.currentY, { maxWidth: this.pageWidth - 2 * this.margin });
    
    this.addFooter();
  }

  save(filename: string): void {
    this.doc.save(filename);
  }
}

// Utility functions for easy use
export const generateAssessmentPDF = (assessment: CKDAssessment) => {
  const generator = new PDFGenerator();
  generator.generateAssessmentReport(assessment);
  generator.save(`CKD_Assessment_${assessment.patientName}_${new Date().toISOString().split('T')[0]}.pdf`);
};

export const generateDietPlanPDF = (dietPlan: DietPlan, assessment?: CKDAssessment) => {
  const generator = new PDFGenerator();
  generator.generateDietPlanReport(dietPlan, assessment);
  const patientName = assessment?.patientName || 'Patient';
  generator.save(`Diet_Plan_${patientName}_${new Date().toISOString().split('T')[0]}.pdf`);
};